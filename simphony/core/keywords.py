# code auto-generated by the
# simphony-metadata/scripts/generate.py script.
# cuba.yml VERSION: 1.0
from collections import namedtuple

import numpy
import uuid

ATTRIBUTES = ["name", "definition", "key", "shape", "dtype"]
Keyword = namedtuple("Keyword", ATTRIBUTES)


KEYWORDS = {
    'ANGULAR_ACCELERATION': Keyword(
        name='AngularAcceleration',
        definition='Angular acceleration of a point or node',  # noqa
        key='ANGULAR_ACCELERATION',
        shape=[3],
        dtype=numpy.float64),
    'VECTOR': Keyword(
        name='Vector',
        definition='A vector in 3D geometric space',  # noqa
        key='VECTOR',
        shape=[3],
        dtype=numpy.float64),
    'BOND_TYPE': Keyword(
        name='BondType',
        definition='Type of label',  # noqa
        key='BOND_TYPE',
        shape=[1],
        dtype=numpy.int32),
    'ELECTROSTATIC_FIELD': Keyword(
        name='ElectrostaticField',
        definition='Electrostatic field',  # noqa
        key='ELECTROSTATIC_FIELD',
        shape=[],
        dtype=numpy.float64),
    'KINEMATIC_VISCOSITY': Keyword(
        name='KinematicViscosity',
        definition='Kinematic viscosity of fluid',  # noqa
        key='KINEMATIC_VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'PATCH': Keyword(
        name='Patch',
        definition='Patch attribute of an entity.',  # noqa
        key='PATCH',
        shape=[8],
        dtype=numpy.str),
    'NUMBER_OF_TIME_STEPS': Keyword(
        name='NumberOfTimeSteps',
        definition='Number of discrete time steps',  # noqa
        key='NUMBER_OF_TIME_STEPS',
        shape=[1],
        dtype=numpy.int32),
    'EXTERNAL_FORCING': Keyword(
        name='ExternalForcing',
        definition='Toggle for an external force',  # noqa
        key='EXTERNAL_FORCING',
        shape=[1],
        dtype=bool),
    'POTENTIAL_ENERGY': Keyword(
        name='PotentialEnergy',
        definition='Potential energy',  # noqa
        key='POTENTIAL_ENERGY',
        shape=[],
        dtype=numpy.float64),
    'COHESION_ENERGY_DENSITY': Keyword(
        name='CohesionEnergyDensity',
        definition='Work of adhesion per unit contact area',  # noqa
        key='COHESION_ENERGY_DENSITY',
        shape=[1],
        dtype=numpy.float64),
    'TIME_STEP': Keyword(
        name='TimeStep',
        definition='Length of a discrete time step',  # noqa
        key='TIME_STEP',
        shape=[1],
        dtype=numpy.float64),
    'DIFFUSION_COEFFICIENT': Keyword(
        name='DiffusionCoefficient',
        definition='Diffusion coefficient',  # noqa
        key='DIFFUSION_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'DIFFUSION_VELOCITY': Keyword(
        name='DiffusionVelocity',
        definition='Diffusion velocity',  # noqa
        key='DIFFUSION_VELOCITY',
        shape=[3],
        dtype=numpy.float64),
    'DIRECTION': Keyword(
        name='Direction',
        definition='Geometric (more general than, e.g., velocity) could be used for spin',  # noqa
        key='DIRECTION',
        shape=[3],
        dtype=numpy.float64),
    'FORCE': Keyword(
        name='Force',
        definition='Force',  # noqa
        key='FORCE',
        shape=[3],
        dtype=numpy.float64),
    'POINT': Keyword(
        name='Point',
        definition='A point in a 3D space system',  # noqa
        key='POINT',
        shape=[3],
        dtype=numpy.float64),
    'INITIAL_VISCOSITY': Keyword(
        name='InitialViscosity',
        definition='Initial viscosity',  # noqa
        key='INITIAL_VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'POWER_LAW_INDEX': Keyword(
        name='PowerLawIndex',
        definition='Power law index',  # noqa
        key='POWER_LAW_INDEX',
        shape=[1],
        dtype=numpy.float64),
    'FLUX': Keyword(
        name='Flux',
        definition='Flux',  # noqa
        key='FLUX',
        shape=[1],
        dtype=numpy.float64),
    'STRESS_TENSOR': Keyword(
        name='StressTensor',
        definition='Stress tensor',  # noqa
        key='STRESS_TENSOR',
        shape=[9],
        dtype=numpy.float64),
    'MASS': Keyword(
        name='Mass',
        definition='Particle mass',  # noqa
        key='MASS',
        shape=[1],
        dtype=numpy.float64),
    'FLOW_TYPE': Keyword(
        name='FlowType',
        definition='Classification of a fluid flow type',  # noqa
        key='FLOW_TYPE',
        shape=[1],
        dtype=numpy.int32),
    'RELATIVE_VELOCITY': Keyword(
        name='RelativeVelocity',
        definition='Relative velocity',  # noqa
        key='RELATIVE_VELOCITY',
        shape=[3],
        dtype=numpy.float64),
    'VAN_DER_WAALS_RADIUS': Keyword(
        name='VanDerWaalsRadius',
        definition='Distance at which the intermolecular potential between the two particles is zero',  # noqa
        key='VAN_DER_WAALS_RADIUS',
        shape=[1],
        dtype=numpy.float64),
    'CRYSTAL_STORAGE': Keyword(
        name='CrystalStorage',
        definition='Additional information for visualization',  # noqa
        key='CRYSTAL_STORAGE',
        shape=[20],
        dtype=numpy.str),
    'SYMMETRY_LATTICE_VECTORS': Keyword(
        name='SymmetryLatticeVectors',
        definition='Symmetry group',  # noqa
        key='SYMMETRY_LATTICE_VECTORS',
        shape=[1],
        dtype=numpy.int32),
    'MOMENTUM': Keyword(
        name='Momentum',
        definition='Momentum',  # noqa
        key='MOMENTUM',
        shape=[],
        dtype=numpy.float64),
    'SHAPE_LENGTH': Keyword(
        name='ShapeLength',
        definition='Length in angstroms of the shape of the materials',  # noqa
        key='SHAPE_LENGTH',
        shape=[3],
        dtype=numpy.float64),
    'FULL': Keyword(
        name='Full',
        definition='Full attribute of an entity.',  # noqa
        key='FULL',
        shape=[128],
        dtype=numpy.str),
    'STATUS': Keyword(
        name='Status',
        definition='Status of a point or node',  # noqa
        key='STATUS',
        shape=[1],
        dtype=numpy.int32),
    'HOMOGENIZED_STRESS_TENSOR': Keyword(
        name='HomogenizedStressTensor',
        definition='Homogenized stress tensor',  # noqa
        key='HOMOGENIZED_STRESS_TENSOR',
        shape=[9],
        dtype=numpy.float64),
    'DENSITY': Keyword(
        name='Density',
        definition='Density',  # noqa
        key='DENSITY',
        shape=[1],
        dtype=numpy.float64),
    'EXTERNAL_APPLIED_FORCE': Keyword(
        name='ExternalAppliedForce',
        definition='Externally applied force (force fields, interactions, etc)',  # noqa
        key='EXTERNAL_APPLIED_FORCE',
        shape=[3],
        dtype=numpy.float64),
    'ENERGY': Keyword(
        name='Energy',
        definition='Energy',  # noqa
        key='ENERGY',
        shape=[],
        dtype=numpy.float64),
    'MATERIAL_TYPE': Keyword(
        name='MaterialType',
        definition='Material dimension and type',  # noqa
        key='MATERIAL_TYPE',
        shape=[1],
        dtype=numpy.int32),
    'PRESSURE': Keyword(
        name='Pressure',
        definition='Pressure',  # noqa
        key='PRESSURE',
        shape=[1],
        dtype=numpy.float64),
    'SHAPE_LENGTH_UC': Keyword(
        name='ShapeLengthUc',
        definition='Length in units cells of the shape of the material',  # noqa
        key='SHAPE_LENGTH_UC',
        shape=[3],
        dtype=numpy.float64),
    'RADIUS': Keyword(
        name='Radius',
        definition='Particle radius',  # noqa
        key='RADIUS',
        shape=[1],
        dtype=numpy.float64),
    'VELOCITY': Keyword(
        name='Velocity',
        definition='Velocity of a point or node',  # noqa
        key='VELOCITY',
        shape=[3],
        dtype=numpy.float64),
    'MOMENT_INERTIA': Keyword(
        name='MomentInertia',
        definition='Moment inertia',  # noqa
        key='MOMENT_INERTIA',
        shape=[],
        dtype=numpy.float64),
    'BOND_LABEL': Keyword(
        name='BondLabel',
        definition='Unique ID of atoms',  # noqa
        key='BOND_LABEL',
        shape=[20],
        dtype=numpy.str),
    'ANGULAR_VELOCITY': Keyword(
        name='AngularVelocity',
        definition='Angular velocity of a point or node',  # noqa
        key='ANGULAR_VELOCITY',
        shape=[3],
        dtype=numpy.float64),
    'AMPHIPHILICITY': Keyword(
        name='Amphiphilicity',
        definition='Hydrophilic/-phile behaviour of a particle',  # noqa
        key='AMPHIPHILICITY',
        shape=[1],
        dtype=numpy.float64),
    'NAME': Keyword(
        name='Name',
        definition='Naming of high-level objects (e.g. solver models)',  # noqa
        key='NAME',
        shape=[20],
        dtype=numpy.str),
    'STRAIN_TENSOR': Keyword(
        name='StrainTensor',
        definition='Strain tensor',  # noqa
        key='STRAIN_TENSOR',
        shape=[9],
        dtype=numpy.float64),
    'MINIMUM_VISCOSITY': Keyword(
        name='MinimumViscosity',
        definition='Minimum viscosity',  # noqa
        key='MINIMUM_VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'MAJOR': Keyword(
        name='Major',
        definition='Major attribute of an entity.',  # noqa
        key='MAJOR',
        shape=[8],
        dtype=numpy.str),
    'LATTICE_SPACING': Keyword(
        name='LatticeSpacing',
        definition='Distance between adjacent lattice nodes',  # noqa
        key='LATTICE_SPACING',
        shape=[1],
        dtype=numpy.float64),
    'UUID': Keyword(
        name='Uuid',
        definition='Universal unique id represented as a hex string size 32',  # noqa
        key='UUID',
        shape=[32],
        dtype=numpy.str),
    'EULER_ANGLES': Keyword(
        name='EulerAngles',
        definition='Euler angles',  # noqa
        key='EULER_ANGLES',
        shape=[3],
        dtype=numpy.float64),
    'LATTICE_VECTORS': Keyword(
        name='LatticeVectors',
        definition='Lattice vectors of unit cell of the component',  # noqa
        key='LATTICE_VECTORS',
        shape=[3, 3],
        dtype=numpy.float64),
    'DELTA_DISPLACEMENT': Keyword(
        name='DeltaDisplacement',
        definition='Displacement during the last time step',  # noqa
        key='DELTA_DISPLACEMENT',
        shape=[3],
        dtype=numpy.float64),
    'THERMODYNAMIC_ENSEMBLE': Keyword(
        name='ThermodynamicEnsemble',
        definition='Thermodynamic ensemble',  # noqa
        key='THERMODYNAMIC_ENSEMBLE',
        shape=[1],
        dtype=numpy.str),
    'CHARGE': Keyword(
        name='Charge',
        definition='Charge',  # noqa
        key='CHARGE',
        shape=[1],
        dtype=numpy.float64),
    'HEAT_CONDUCTIVITY': Keyword(
        name='HeatConductivity',
        definition='Heat conductivity',  # noqa
        key='HEAT_CONDUCTIVITY',
        shape=[1],
        dtype=numpy.float64),
    'SHAPE_SIDE': Keyword(
        name='ShapeSide',
        definition='Side length for a hexagonal material',  # noqa
        key='SHAPE_SIDE',
        shape=[3],
        dtype=numpy.float64),
    'DIELECTRIC_CONSTANT': Keyword(
        name='DielectricConstant',
        definition='Ratio of the permittivity of a substance to the permittivity of free space or vacuum',  # noqa
        key='DIELECTRIC_CONSTANT',
        shape=[1],
        dtype=numpy.float64),
    'CONCENTRATION': Keyword(
        name='Concentration',
        definition='Concentration of a substance',  # noqa
        key='CONCENTRATION',
        shape=[1],
        dtype=numpy.float64),
    'ZETA_POTENTIAL': Keyword(
        name='ZetaPotential',
        definition='Coulomb interaction between particles',  # noqa
        key='ZETA_POTENTIAL',
        shape=[1],
        dtype=numpy.float64),
    'ENERGY_WELL_DEPTH': Keyword(
        name='EnergyWellDepth',
        definition='Measurement of how strongly the two particles attract each other',  # noqa
        key='ENERGY_WELL_DEPTH',
        shape=[1],
        dtype=numpy.float64),
    'SIMULATION_DOMAIN_ORIGIN': Keyword(
        name='SimulationDomainOrigin',
        definition='Offset for the simulation models',  # noqa
        key='SIMULATION_DOMAIN_ORIGIN',
        shape=[3],
        dtype=numpy.float64),
    'PROBABILITY_COEFFICIENT': Keyword(
        name='ProbabilityCoefficient',
        definition='For stochastic processes (e.g. sorption)',  # noqa
        key='PROBABILITY_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'SHAPE_RADIUS': Keyword(
        name='ShapeRadius',
        definition='Radius for a spherical material',  # noqa
        key='SHAPE_RADIUS',
        shape=[3],
        dtype=numpy.float64),
    'VISCOSITY': Keyword(
        name='Viscosity',
        definition='Viscosity',  # noqa
        key='VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'RESTITUTION_COEFFICIENT': Keyword(
        name='RestitutionCoefficient',
        definition='Restitution coefficient',  # noqa
        key='RESTITUTION_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'COLLISION_OPERATOR': Keyword(
        name='CollisionOperator',
        definition='Collision operator of a model Boltzmann equation',  # noqa
        key='COLLISION_OPERATOR',
        shape=[1],
        dtype=numpy.int32),
    'DEBYE_LENGTH': Keyword(
        name='DebyeLength',
        definition='Electrostatic effects of particles in solution',  # noqa
        key='DEBYE_LENGTH',
        shape=[1],
        dtype=numpy.float64),
    'LABEL': Keyword(
        name='Label',
        definition='Label for a point or node',  # noqa
        key='LABEL',
        shape=[1],
        dtype=numpy.int32),
    'VOLUME': Keyword(
        name='Volume',
        definition='Volume of a particle, cell, etc.',  # noqa
        key='VOLUME',
        shape=[1],
        dtype=numpy.float64),
    'YOUNG_MODULUS': Keyword(
        name='YoungModulus',
        definition='Young modulus',  # noqa
        key='YOUNG_MODULUS',
        shape=[1],
        dtype=numpy.float64),
    'FRICTION_COEFFICIENT': Keyword(
        name='FrictionCoefficient',
        definition='Control particle friction',  # noqa
        key='FRICTION_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'POISSON_RATIO': Keyword(
        name='PoissonRatio',
        definition='Poisson ratio',  # noqa
        key='POISSON_RATIO',
        shape=[1],
        dtype=numpy.float64),
    'SCALING_COEFFICIENT': Keyword(
        name='ScalingCoefficient',
        definition='Coarsening or time-scale bridging',  # noqa
        key='SCALING_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'FACE': Keyword(
        name='Face',
        definition='A face of a three dimensional object defined by the nodes',  # noqa
        key='FACE',
        shape=[1],
        dtype=numpy.float64),
    'SMOOTHING_LENGTH': Keyword(
        name='SmoothingLength',
        definition='Half of kernel cut-off for all splines',  # noqa
        key='SMOOTHING_LENGTH',
        shape=[1],
        dtype=numpy.float64),
    'ORDER_PARAMETER': Keyword(
        name='OrderParameter',
        definition='Phase field in multiphase flows',  # noqa
        key='ORDER_PARAMETER',
        shape=[1],
        dtype=numpy.float64),
    'ACCELERATION': Keyword(
        name='Acceleration',
        definition='Acceleration of a point or node',  # noqa
        key='ACCELERATION',
        shape=[3],
        dtype=numpy.float64),
    'NUMBER_OF_POINTS': Keyword(
        name='NumberOfPoints',
        definition='Number of points or nodes',  # noqa
        key='NUMBER_OF_POINTS',
        shape=[1],
        dtype=numpy.int32),
    'NAME_UC': Keyword(
        name='NameUc',
        definition='Name of the unit cell of the component',  # noqa
        key='NAME_UC',
        shape=[20],
        dtype=numpy.str),
    'SPHERICITY': Keyword(
        name='Sphericity',
        definition='Sphericity of the particle',  # noqa
        key='SPHERICITY',
        shape=[1],
        dtype=numpy.float64),
    'ELECTRIC_FIELD': Keyword(
        name='ElectricField',
        definition='Electric field',  # noqa
        key='ELECTRIC_FIELD',
        shape=[],
        dtype=numpy.float64),
    'HAMAKER_CONSTANT': Keyword(
        name='HamakerConstant',
        definition='Van der Waals body-body interaction',  # noqa
        key='HAMAKER_CONSTANT',
        shape=[1],
        dtype=numpy.float64),
    'ION_VALENCE_EFFECT': Keyword(
        name='IonValenceEffect',
        definition='Coulomb interaction between particles',  # noqa
        key='ION_VALENCE_EFFECT',
        shape=[1],
        dtype=numpy.float64),
    'CHARGE_DENSITY': Keyword(
        name='ChargeDensity',
        definition='Charge density',  # noqa
        key='CHARGE_DENSITY',
        shape=[],
        dtype=numpy.float64),
    'POSITION': Keyword(
        name='Position',
        definition='Position of a point or node or atom',  # noqa
        key='POSITION',
        shape=[3],
        dtype=numpy.float64),
    'MAXIMUM_VISCOSITY': Keyword(
        name='MaximumViscosity',
        definition='Maximum viscosity',  # noqa
        key='MAXIMUM_VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'CHEMICAL_SPECIE': Keyword(
        name='ChemicalSpecie',
        definition='Chemical specie',  # noqa
        key='CHEMICAL_SPECIE',
        shape=[20],
        dtype=numpy.str),
    'SIMULATION_DOMAIN_DIMENSIONS': Keyword(
        name='SimulationDomainDimensions',
        definition='Size of the simulation models',  # noqa
        key='SIMULATION_DOMAIN_DIMENSIONS',
        shape=[3],
        dtype=numpy.float64),
    'ORIGINAL_POSITION': Keyword(
        name='OriginalPosition',
        definition='Position at the beginning of the calculation',  # noqa
        key='ORIGINAL_POSITION',
        shape=[3],
        dtype=numpy.float64),
    'TEMPERATURE': Keyword(
        name='Temperature',
        definition='Temperature',  # noqa
        key='TEMPERATURE',
        shape=[1],
        dtype=numpy.float64),
    'DYNAMIC_PRESSURE': Keyword(
        name='DynamicPressure',
        definition='Dynamic pressure',  # noqa
        key='DYNAMIC_PRESSURE',
        shape=[1],
        dtype=numpy.float64),
    'REFERENCE_DENSITY': Keyword(
        name='ReferenceDensity',
        definition='Reference value for density',  # noqa
        key='REFERENCE_DENSITY',
        shape=[1],
        dtype=numpy.float64),
    'TORQUE': Keyword(
        name='Torque',
        definition='Torque',  # noqa
        key='TORQUE',
        shape=[3],
        dtype=numpy.float64),
    'VOLUME_FRACTION_GRADIENT': Keyword(
        name='VolumeFractionGradient',
        definition='Volume fraction gradient',  # noqa
        key='VOLUME_FRACTION_GRADIENT',
        shape=[3],
        dtype=numpy.float64),
    'OCCUPANCY': Keyword(
        name='Occupancy',
        definition='Occupancy of an atomic position',  # noqa
        key='OCCUPANCY',
        shape=[1],
        dtype=numpy.float64),
    'ELECTRON_MASS': Keyword(
        name='ElectronMass',
        definition='Electron mass',  # noqa
        key='ELECTRON_MASS',
        shape=[1],
        dtype=numpy.float64),
    'DYNAMIC_VISCOSITY': Keyword(
        name='DynamicViscosity',
        definition='Dynamic viscosity of fluid',  # noqa
        key='DYNAMIC_VISCOSITY',
        shape=[1],
        dtype=numpy.float64),
    'DISTRIBUTION': Keyword(
        name='Distribution',
        definition='Single-particle distribution function',  # noqa
        key='DISTRIBUTION',
        shape=[1],
        dtype=numpy.float64),
    'MINOR': Keyword(
        name='Minor',
        definition='Minor attribute of an entity.',  # noqa
        key='MINOR',
        shape=[8],
        dtype=numpy.str),
    'SIZE': Keyword(
        name='Size',
        definition='For non-spherical particles',  # noqa
        key='SIZE',
        shape=[1],
        dtype=numpy.float64),
    'DESCRIPTION': Keyword(
        name='Description',
        definition='Description text',  # noqa
        key='DESCRIPTION',
        shape=[20],
        dtype=numpy.str),
    'EQUATION_OF_STATE_COEFFICIENT': Keyword(
        name='EquationOfStateCoefficient',
        definition='Equation of state for multiphase fluids',  # noqa
        key='EQUATION_OF_STATE_COEFFICIENT',
        shape=[1],
        dtype=numpy.float64),
    'LINEAR_CONSTANT': Keyword(
        name='LinearConstant',
        definition='Linear constant',  # noqa
        key='LINEAR_CONSTANT',
        shape=[1],
        dtype=numpy.float64),
    'ROLLING_FRICTION': Keyword(
        name='RollingFriction',
        definition='Rolling friction coefficient',  # noqa
        key='ROLLING_FRICTION',
        shape=[1],
        dtype=numpy.float64),
    'CONTACT_ANGLE': Keyword(
        name='ContactAngle',
        definition='Wettability in multiphase flows',  # noqa
        key='CONTACT_ANGLE',
        shape=[1],
        dtype=numpy.float64),
    'PHASE_INTERACTION_STRENGTH': Keyword(
        name='PhaseInteractionStrength',
        definition='Strength of phase interactions on a particle',  # noqa
        key='PHASE_INTERACTION_STRENGTH',
        shape=[1],
        dtype=numpy.float64),
    'VOLUME_FRACTION': Keyword(
        name='VolumeFraction',
        definition='Volume fraction',  # noqa
        key='VOLUME_FRACTION',
        shape=[1],
        dtype=numpy.float64),
    'SURFACE_TENSION': Keyword(
        name='SurfaceTension',
        definition='Surface tension',  # noqa
        key='SURFACE_TENSION',
        shape=[1],
        dtype=numpy.float64),
    'TIME': Keyword(
        name='Time',
        definition='Time',  # noqa
        key='TIME',
        shape=[1],
        dtype=numpy.float64),
    'CUTOFF_DISTANCE': Keyword(
        name='CutoffDistance',
        definition='Distance where force is no longer taken into account',  # noqa
        key='CUTOFF_DISTANCE',
        shape=[1],
        dtype=numpy.float64),
    'RELAXATION_TIME': Keyword(
        name='RelaxationTime',
        definition='Relaxation time',  # noqa
        key='RELAXATION_TIME',
        shape=[1],
        dtype=numpy.float64),
    'SHAPE_CENTER': Keyword(
        name='ShapeCenter',
        definition='Geometrical center of the shape of the material',  # noqa
        key='SHAPE_CENTER',
        shape=[3],
        dtype=numpy.float64),
    'CONTANCT_ANGLE': Keyword(
        name='ContanctAngle',
        definition='Wettability in multiphase flows',  # noqa
        key='CONTANCT_ANGLE',
        shape=[1],
        dtype=numpy.float64),
    'MATERIAL_ID': Keyword(
        name='MaterialId',
        definition='Material identification number',  # noqa
        key='MATERIAL_ID',
        shape=[1],
        dtype=numpy.int32),
}
