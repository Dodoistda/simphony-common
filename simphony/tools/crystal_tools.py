from simphony.cuds.particles import Particle, Particles
from simphony.core.cuba import CUBA
import numpy

def write_file(particles, file_format, file_name):
    if file_format == "EXYZ":
        f = open(file_name+".exyz", "w")
        f.write("{}\n".format(particles.count_of(CUDSItem.PARTICLE)))
        f.write("File generated by SimPhoNy 0.0.1\n")
        # normally the types of atoms should be inferred from the
        # shared data for now we assume one type, randomly chosen
        # as Al.
        for p in particles.iter_particles():
            f.write("Al {:f} {:f} {:f} ".format(
                p.coordinates[0],
                p.coordinates[1],
                p.coordinates[2]))
            # need to check first if the velocity exists.
            f.write(" {:f} {:f} {:f}\n".format(
                p.data[CUBA.VELOCITY][0],
                p.data[CUBA.VELOCITY][1],
                p.data[CUBA.VELOCITY][2]))
        # assume the supercell is already multiplied by the
        # lattice parameter This should be an issue for the
        # conversion work.
        f.write("alat\n"+"{:+f}\n".format(1.0))
        super_cell = particles.data_extension[
            lammps.CUBAExtension.BOX_VECTORS]
        f.write("supercell\n {:+f} {:+f} {:+f}\n".format(
            super_cell[0][0],
            super_cell[0][1],
            super_cell[0][2]))

        f.write(" {:+f} {:+f} {:+f}\n".format(
            super_cell[1][0],
            super_cell[1][1],
            super_cell[1][2]))

        f.write(" {:+f} {:+f} {:+f}\n".format(
            super_cell[2][0],
            super_cell[2][1],
            super_cell[2][2]))
        f.write(" Mass Al 1.0 \n")
        f.write("Cartesian coordinates\n")
        f.close()
    else:
        raise NotImplementedError()
atoms = None
unit_cell = None
def main():
    global atoms, unit_cell
    # Use a SC unit cell with basis for the FCC system
    unit_cell = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]

    # The number of periodic images, or duplications of the unit cell in each
    # cubic lattice direction
    N_dup = [40, 40, 40]
    # The basis of the FCC system in the SC setup:
    basis = [
        [0.0, 0.0, 0.0],
        [0.5, 0.5, 0.0],
        [0.5, 0.0, 0.5],
        [0.0, 0.5, 0.5]
    ]
    # The lattice parameter (in a cubic setup)
    a_latt = 1.549
    atoms, unit_cell = duplicate_lattice(unit_cell, a_latt, basis, N_dup)

def duplicate_lattice(unit_cell, a_latt, basis, dup_factors):
    """Duplicate the give lattice."""
    vaxis = 0 
    for vaxis in xrange (3):
        size0 = len(basis)
        natoms = dup_factors[vaxis] * size0
        pc = Particles("Test")

        atoms = numpy.zeros((natoms, 3))
        for i in xrange(size0):
            atoms[i] = basis[i]

        i = 0
        for idup in xrange(dup_factors[vaxis]):
            for j in xrange(size0):
                # copy type
                for k in xrange(3):
                    atoms[i][k] = atoms[j][k]
                # Copy properties
                i += 1
        for k in xrange(3):
            unit_cell[vaxis][k] *= dup_factors[vaxis]
        
        basis = atoms 
    return atoms, unit_cell

if __name__ == '__main__':
    main()
